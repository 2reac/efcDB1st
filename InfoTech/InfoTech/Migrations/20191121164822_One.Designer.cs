// <auto-generated />
using System;
using InfoTech.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace InfoTech.Migrations
{
    [DbContext(typeof(ITContext))]
    [Migration("20191121164822_One")]
    partial class One
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("InfoTech.Models.Brand", b =>
                {
                    b.Property<int>("BrandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("brand_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BrandName")
                        .IsRequired()
                        .HasColumnName("brand_name")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<int?>("BrandYear")
                        .HasColumnName("brand_year");

                    b.HasKey("BrandId");

                    b.ToTable("brand");
                });

            modelBuilder.Entity("InfoTech.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("category_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("CategoryAvailability")
                        .HasColumnName("category_availability");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnName("category_name")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("CategoryId");

                    b.ToTable("category");
                });

            modelBuilder.Entity("InfoTech.Models.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("customer_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AddressId")
                        .HasColumnName("address_id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("email")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FirstName")
                        .HasColumnName("first_name")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("LastName")
                        .HasColumnName("last_name")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Phone")
                        .HasColumnName("phone")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.HasKey("CustomerId");

                    b.HasIndex("AddressId");

                    b.ToTable("customer");
                });

            modelBuilder.Entity("InfoTech.Models.DeliveryAddress", b =>
                {
                    b.Property<int>("DeliveryAddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("delivery_address_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AddressId")
                        .HasColumnName("address_id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("email")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnName("first_name")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnName("last_name")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Phone")
                        .HasColumnName("phone")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.HasKey("DeliveryAddressId");

                    b.HasIndex("AddressId");

                    b.ToTable("delivery_address");
                });

            modelBuilder.Entity("InfoTech.Models.Discount", b =>
                {
                    b.Property<string>("DiscountCode")
                        .HasColumnName("discount_code")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<int>("DiscountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("discount_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DiscountPercentage")
                        .HasColumnName("discount_percentage");

                    b.HasKey("DiscountCode")
                        .HasName("PK__discount__75C1F00773645239");

                    b.HasIndex("DiscountId")
                        .IsUnique()
                        .HasName("UQ__discount__BDBE9EF828A6921A");

                    b.ToTable("discount");
                });

            modelBuilder.Entity("InfoTech.Models.GeneralAddress", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("address_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnName("city")
                        .HasMaxLength(40)
                        .IsUnicode(false);

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnName("country")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<int>("Number")
                        .HasColumnName("number");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasColumnName("region")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnName("street")
                        .HasMaxLength(40)
                        .IsUnicode(false);

                    b.Property<string>("ZipCode")
                        .HasColumnName("zip_code")
                        .HasMaxLength(7)
                        .IsUnicode(false);

                    b.HasKey("AddressId")
                        .HasName("PK__general___CAA247C8FDFC7460");

                    b.ToTable("general_address");
                });

            modelBuilder.Entity("InfoTech.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("order_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CustomerId")
                        .HasColumnName("customer_id");

                    b.Property<int>("DeliveryAddressId")
                        .HasColumnName("delivery_address_id");

                    b.Property<string>("DiscountCode")
                        .HasColumnName("discount_code")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<DateTime?>("OrderDate")
                        .HasColumnName("order_date")
                        .HasColumnType("date");

                    b.Property<string>("OrderStatus")
                        .HasColumnName("order_status")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<int>("PaymentId")
                        .HasColumnName("payment_id");

                    b.Property<int>("StoreId")
                        .HasColumnName("store_id");

                    b.HasKey("OrderId", "CustomerId")
                        .HasName("PK__order__0A8F3E919260B283");

                    b.HasIndex("CustomerId");

                    b.HasIndex("DeliveryAddressId");

                    b.HasIndex("DiscountCode");

                    b.HasIndex("OrderId")
                        .IsUnique()
                        .HasName("UQ__order__4659622899651CE0");

                    b.HasIndex("PaymentId");

                    b.HasIndex("StoreId");

                    b.ToTable("order");
                });

            modelBuilder.Entity("InfoTech.Models.OrderProduct", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnName("order_id");

                    b.Property<int>("ProductId")
                        .HasColumnName("product_id");

                    b.Property<int>("Quantity")
                        .HasColumnName("quantity");

                    b.HasKey("OrderId", "ProductId")
                        .HasName("PK__order_pr__022945F640295809");

                    b.HasIndex("ProductId");

                    b.ToTable("order_product");
                });

            modelBuilder.Entity("InfoTech.Models.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("payment_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("PaymentType")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("payment_type")
                        .HasDefaultValueSql("('Card')")
                        .HasMaxLength(4)
                        .IsUnicode(false);

                    b.Property<decimal?>("PaymentValue")
                        .HasColumnName("payment_value")
                        .HasColumnType("numeric(12, 2)");

                    b.HasKey("PaymentId");

                    b.ToTable("payment");
                });

            modelBuilder.Entity("InfoTech.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("product_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BrandId")
                        .HasColumnName("brand_id");

                    b.Property<int>("CategoryId")
                        .HasColumnName("category_id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("description")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<bool?>("InStock")
                        .HasColumnName("in_stock");

                    b.Property<string>("Origin")
                        .HasColumnName("origin")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<int>("ProductDiscountPercent")
                        .HasColumnName("product_discount_percent");

                    b.Property<string>("ProductImage")
                        .HasColumnName("product_image");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnName("product_name")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<decimal?>("ProductPrice")
                        .HasColumnName("product_price")
                        .HasColumnType("numeric(9, 2)");

                    b.HasKey("ProductId");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.ToTable("product");
                });

            modelBuilder.Entity("InfoTech.Models.ProductCategory", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnName("product_id");

                    b.Property<int>("CategoryId")
                        .HasColumnName("category_id");

                    b.HasKey("ProductId", "CategoryId")
                        .HasName("PK__product___1A56936E94F76A3D");

                    b.HasIndex("CategoryId");

                    b.ToTable("product_category");
                });

            modelBuilder.Entity("InfoTech.Models.Stock", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnName("product_id");

                    b.Property<int>("StoreId")
                        .HasColumnName("store_id");

                    b.Property<int?>("Quantity")
                        .HasColumnName("quantity");

                    b.HasKey("ProductId", "StoreId")
                        .HasName("PK__stock__9D2D57C5EAA0285C");

                    b.HasIndex("StoreId");

                    b.ToTable("stock");
                });

            modelBuilder.Entity("InfoTech.Models.Store", b =>
                {
                    b.Property<int>("StoreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("store_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnName("city")
                        .HasMaxLength(40)
                        .IsUnicode(false);

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnName("country")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("email")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Phone")
                        .HasColumnName("phone")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasColumnName("region")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("StoreName")
                        .IsRequired()
                        .HasColumnName("store_name")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnName("street")
                        .HasMaxLength(40)
                        .IsUnicode(false);

                    b.Property<string>("ZipCode")
                        .HasColumnName("zip_code")
                        .HasMaxLength(7)
                        .IsUnicode(false);

                    b.HasKey("StoreId");

                    b.ToTable("store");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("InfoTech.Models.Customer", b =>
                {
                    b.HasOne("InfoTech.Models.GeneralAddress", "Address")
                        .WithMany("Customer")
                        .HasForeignKey("AddressId")
                        .HasConstraintName("FK__customer__addres__68487DD7");
                });

            modelBuilder.Entity("InfoTech.Models.DeliveryAddress", b =>
                {
                    b.HasOne("InfoTech.Models.GeneralAddress", "Address")
                        .WithMany("DeliveryAddress")
                        .HasForeignKey("AddressId")
                        .HasConstraintName("FK__delivery___addre__4BAC3F29");
                });

            modelBuilder.Entity("InfoTech.Models.Order", b =>
                {
                    b.HasOne("InfoTech.Models.Customer", "Customer")
                        .WithMany("Order")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK__order__customer___6C190EBB");

                    b.HasOne("InfoTech.Models.DeliveryAddress", "DeliveryAddress")
                        .WithMany("Order")
                        .HasForeignKey("DeliveryAddressId")
                        .HasConstraintName("FK__order__delivery___6D0D32F4");

                    b.HasOne("InfoTech.Models.Discount", "DiscountCodeNavigation")
                        .WithMany("Order")
                        .HasForeignKey("DiscountCode")
                        .HasConstraintName("FK__order__discount___6EF57B66");

                    b.HasOne("InfoTech.Models.Payment", "Payment")
                        .WithMany("Order")
                        .HasForeignKey("PaymentId")
                        .HasConstraintName("FK__order__payment_i__6FE99F9F");

                    b.HasOne("InfoTech.Models.Store", "Store")
                        .WithMany("Order")
                        .HasForeignKey("StoreId")
                        .HasConstraintName("FK__order__store_id__6E01572D");
                });

            modelBuilder.Entity("InfoTech.Models.OrderProduct", b =>
                {
                    b.HasOne("InfoTech.Models.Order", "Order")
                        .WithMany("OrderProduct")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK__order_pro__order__73BA3083")
                        .HasPrincipalKey("OrderId");

                    b.HasOne("InfoTech.Models.Product", "Product")
                        .WithMany("OrderProduct")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK__order_pro__produ__74AE54BC");
                });

            modelBuilder.Entity("InfoTech.Models.Product", b =>
                {
                    b.HasOne("InfoTech.Models.Brand", "Brand")
                        .WithMany("Product")
                        .HasForeignKey("BrandId")
                        .HasConstraintName("FK__product__brand_i__59FA5E80");

                    b.HasOne("InfoTech.Models.Category", "Category")
                        .WithMany("Product")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK__product__categor__5AEE82B9");
                });

            modelBuilder.Entity("InfoTech.Models.ProductCategory", b =>
                {
                    b.HasOne("InfoTech.Models.Category", "Category")
                        .WithMany("ProductCategory")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK__product_c__categ__656C112C");

                    b.HasOne("InfoTech.Models.Product", "Product")
                        .WithMany("ProductCategory")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK__product_c__produ__6477ECF3");
                });

            modelBuilder.Entity("InfoTech.Models.Stock", b =>
                {
                    b.HasOne("InfoTech.Models.Product", "Product")
                        .WithMany("Stock")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK__stock__product_i__60A75C0F");

                    b.HasOne("InfoTech.Models.Store", "Store")
                        .WithMany("Stock")
                        .HasForeignKey("StoreId")
                        .HasConstraintName("FK__stock__store_id__619B8048");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
